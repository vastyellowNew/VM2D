/*!
\file
\brief Заголовочный файл с описанием класса Airfoil
\author Марчевский Илья Константинович
\author Кузьмина Ксения Сергеевна
\author Рятина Евгения Павловна
\version 1.0
\date 1 декабря 2017 г.
*/

#ifndef AIRFOIL_H
#define AIRFOIL_H

#include "Passport.h"

/*!
\brief Абстрактный класс, определяющий обтекаемый профиль
\author Марчевский Илья Константинович
\author Кузьмина Ксения Сергеевна
\author Рятина Евгения Павловна
\version 1.0
\date 1 декабря 2017 г.
*/
class Airfoil
{
public:	
	/// Положение центра масс профиля
	Point2D rcm;  
	
	/// Масса профиля
	double m;     
	
	/// Полярный момент инерции профиля относительно центра масс
	double J;     
	
	/// Число панелей на профиле
	size_t np;    
	
    ///\brief Координаты начал панелей  
	///
	/// Всегда обеспечивается условие r[np] = r[0];
	/// \n вектор r содержит (np+1) элемент, где np --- число панелей.
	/// \n Это позволяет удобно обращаться к r[i] и r[i+1] как к началу и концу i-й панели
	std::vector<Point2D> r;
	
	/// \brief Нормали к панелям профиля
	///
	/// Нормали задаются внешними, нормированными на единицу
	std::vector<Point2D> nrm;

	/// \brief Касательные к панелям профиля
	///
	/// Касательные соответствуют обходу профиля против часовой стрелки, задаются нормированными на единицу
	std::vector<Point2D> tau;

	/// Длины панелей профиля
	std::vector<double> len;  

	Point2D lowLeft; ///< Левый нижний угол габаритного прямоугольника профиля
	Point2D upRight; ///< Правый верхний угол габаритного прямоугольника профиля
	
	///\brief Скорости начал панелей  
	///
	/// Всегда обеспечивается условие v[np] = v[0];
	/// \n вектор v содержит (np+1) элемент, где np --- число панелей.
	/// \n Это позволяет удобно обращаться к v[i] и v[i+1] как к скорости начала и конца i-й панели
	/// \warning при чтении из файла зашивается нулями
	std::vector<Point2D> v;

	/// Конструктор
	Airfoil();

	/// Деструктор
	virtual ~Airfoil() { };
	
	/// Вычисление нормалей, касательных и длин панелей по текущему положению вершин
	void CalcNrmTauLen();	

	/// \brief Проверка, идет ли вершина i следом за вершиной j
	///
	/// \param[in] i проверяемая вершина
	/// \param[in] j контрольная вершина
	/// \return true, если i-я вершина следует зп j-й в порядке обхода профиля
	bool isAfter(int i, int j) const;
	
	/// \brief Поворот профиля 
	///
	/// Поворачивает профиль на угол \f$ \alpha \f$ вокруг центра масс
	/// \param[in] alpha угол поворота против часовой стрелки в радианах
	void Rotate(double alpha);			 
	
	/// \brief Масштабирование профиля 
	///
	/// Масштабирует профиль в factor раз относительно центра масс
	/// \param[in] factor масштабный коэффициент
	void Scale(double factor);			

	/// \brief Перемещение профиля 
	///
	/// Плоскопараллельно перемещает профиль на вектор \f$ \overrightarrow{dr} \f$
	///
	/// \param[in] dr константная ссылка на вектор перемещения
	void Move(const Point2D& dr);
	
	/// \brief Вычисляет габаритный прямоугольник профиля
	///
	/// Заполняет значения полей lowLeft и upRight по габаритному прямоугольнику профиля с учетом зазора
	///
	/// \param[in] gap относительная величина зазора в долях от размера габаритного прямоугольника (по умолчанию 0.02, что соответствует 2 %)
	void GetGabarits(double gap = 0.02); 
	
	/// \brief Определяет, находится ли точка с радиус-вектором \f$ \vec r \f$ внутри габаритного прямоугольника профиля
	///
	/// \param[in] r константная ссылка на текущее положение точки
	/// \return true, если точка внутри габаритного прямоугольника
	bool isInsideGabarits(const Point2D& r) const;

	/// \brief Определяет, находится ли точка с радиус-вектором \f$ \vec r \f$ вне габаритного прямоугольника профиля
	///
	/// \param[in] r константная ссылка на текущее положение точки
	/// \return true, если точка вне габаритного прямоугольника
	bool isOutsideGabarits(const Point2D& r) const; 

	/// \brief Считывание профиля из файла
	///
	/// Считывание геометрии профиля из файла, вычисление всех прочих параметров профиля
	/// \n После загрузки из файла профиль поворачивается на нужный угол и масштабируется на нужный коэффициент
	/// \warning Сейчас масса, момент инерции и скорости вершин зануляются.
	///
	/// \param[in] dir константная ссылка на строку --- имя каталога, где лежит cчитываемый файл
	/// \param[in] param константная ссылка на объект, хранящий параметры профиля
	virtual void ReadFromFile(const std::string& dir, const AirfoilParams& param) = 0;
};

#endif
